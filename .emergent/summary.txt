<analysis>
The AI engineer's work involved incrementally building and refining a nautical AIS/NMEA data application. Initially, it focused on core functionalities like React frontend, FastAPI backend, MongoDB integration, and real-time streaming via TCP/UDP/Serial with WebSocket. Key issues addressed included PyAIS usage, MongoDB serialization, and UI/UX enhancements with Shadcn UI. Recent iterations concentrated on fixing crucial bugs: incorrect AIS Type 4 message processing, broken real-time TCP stream updates due to WebSocket misconfigurations and inefficient polling, and UI/UX improvements like database clear confirmation, spoof limit calculation, and source management. The engineer also generated standalone build instructions and a GitHub repository setup. The current state is addressing filtering invalid position data from AIS messages.
</analysis>

<product_requirements>
The user requested a nautical AIS/NMEA data application with real-time streaming. It features storing raw/decoded data in MongoDB, plotting on a map with , decoding all AIS message types via , and supporting TCP/UDP/Serial/file inputs. Historical position trails (Green >2, Orange/Yellow =2, Red =1) with directional arrows are displayed. A floating info panel shows detailed vessel data, including ship name, call sign, MMSI country, multiple data sources, and spoof status. A data source manager allows adding/disabling/removing sources, with a Disable All Sources option. Search functionality by MMSI, ship name, or call sign is included. Base stations are marked as blue squares. VDO messages are plotted as blue squares, with pink range circles representing the base station's coverage (distance to furthest valid VDM). Spoof limits (default 500km) determine VDM validity; invalid targets are greyed out. The application also includes UI improvements such as app title change, updated text colors, progress bar for file uploads, and a Search MMSI on VesselFinder button. A status panel with database statistics and export to .xlsx, and auto-centering the map on new targets were also requested.
</product_requirements>

<key_technical_concepts>
- **FastAPI**: Backend API development, data processing, and database interactions.
- **React**: Frontend UI, state management, and map integration with .
- **MongoDB**: NoSQL database for AIS/NMEA data storage.
- **PyAIS**: Python library for AIS/NMEA message decoding.
- **WebSockets**: Initially used for real-time updates, later replaced with polling due to environment issues.
- **Shadcn UI & Tailwind CSS**: Frontend styling and component library.
- **Asyncio/Threading**: Concurrent stream handling in backend.
</key_technical_concepts>

<code_architecture>
The application uses a MERN-like stack: FastAPI (Python), React (JavaScript), and MongoDB.



- ****:
    -   **Purpose**: Main FastAPI application handling API routes, data processing, and database interactions.
    -   **Summary of changes**: Implemented  for  decoding, initially had issues with AIS Type 4 and VDO message parsing (fixed). Integrated  for async MongoDB. Added data serialization for  and . Stream handlers (, , ) use threading; initially lacked WebSocket broadcast, fixed via  and later switched to HTTP polling. Implemented source management, historical data retrieval, vessel info enrichment, and search. Developed spoof detection logic (fixed default spoof limit to 500km, refined range calculation with furthest valid VDM and ). Added duplicate source checking, and option to delete data with source. Introduced endpoints for stream pause/resume/message limits, and a  endpoint for database stats and  export. Refactored stream handlers into reusable functions.
-   ****:
    -   **Purpose**: Main React component managing UI, state, and client-side logic.
    -   **Summary of changes**: Implemented a nautical-themed UI with  for map display and Shadcn UI components. Manages application state for vessels, sources, selections, and map settings. Uses  for API calls and initially native WebSocket (later polling) for real-time updates. Implemented UI for source management, historical trails, floating info panel, spoof limit configuration, and VDO visualization (blue squares, pink range circles). Implemented debouncing for search and toggle functions. Fixed issues with WebSocket connection and real-time updates through polling interval. Replaced  with Shadcn Dialog for Clear Database. Added Search MMSI on VesselFinder button. Updated UI text colors, app title to CNS Systems Target Plotter, toast position, and a file upload progress indicator. Added state and functions for pause/resume stream, message limits, and source statistics display. Implemented auto-centering map on newly loaded vessels.
-   ****:
    -   **Purpose**: Global and component-specific styles using Tailwind CSS.
    -   **Summary of changes**: Defined nautical theme colors, layout styles. Addressed z-index issues. Added custom styles for vessel markers, VDO circles, info panels. Fixed text contrast issues in the sidebar and MMSI info panel. Added styles for source statistics display and file upload progress.
-   ** & **:
    -   **Purpose**: List Python and Node.js dependencies.
    -   **Summary of changes**: Updated to include , usage: websockets [--version | <uri>], ,  (backend), various Radix UI, , , ,  (frontend), and  (backend for  export).
</code_architecture>

<pending_tasks>
- Filter out and omit plotting positions that are outside of the valid longitude and latitude range (e.g., lon=181, lat=91).
- If a previous valid position exists, use this position until the next valid position for plotting.
</pending_tasks>

<current_work>
Immediately before this summary request, the AI engineer was tasked with handling special AIS cases where vessels report out-of-range positions (e.g., 181° East, 91° North) to indicate a lack of valid position data. The user explicitly requested that these invalid positions should *never be plotted* on the map, although all other data should still be saved. Furthermore, if a previously valid position exists for a vessel, it should be used for plotting until a new valid position is received. The AI engineer acknowledged this request and stated, Excellent catch! Let me add position validation to filter out these invalid no position indicators. This indicates the current work is to modify the backend's position processing logic to validate  and  values and prevent invalid ones from being used for map plotting, potentially storing a last known good position.
</current_work>

<optional_next_step>
Implement position validation in the backend to filter out invalid longitude (e.g., >180 or <-180) and latitude (e.g., >90 or <-90) values.
</optional_next_step>
